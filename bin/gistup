#!/usr/bin/env node

var os = require("os"),
    child = require("child_process"),
    readline = require("readline");

var queue = require("queue-async"),
    optimist = require("optimist");

var quote = require("../lib/gistup/quote"),
    getSettings = require("../lib/gistup/get-settings"),
    unless = require("../lib/gistup/unless"),
    api = require("../lib/gistup/api"),
    UserError = require("../lib/gistup/user-error");

var argv = optimist.usage("Usage: \033[1mgistup\033[0m [options] -- [file …]" + os.EOL + os.EOL

+ "Version: " + require("../package.json").version + os.EOL + os.EOL

+ "Uploads the specified files to create a new Gist. If no files are specified," + os.EOL
+ "all files in the current directory are uploaded.")
    .options("public", {
      default: true,
      describe: "true for a public gist; false for a secret one"
    })
    .options("private", {
      default: false,
      describe: "alias for --no-public"
    })
    .options("description", {
      alias: "m",
      default: "",
      describe: "an optional description for your gist"
    })
    .options("interactive", {
      alias: "i",
      default: false,
      describe: "request confirmation of every file before adding"
    })
    .options("exclude", {
      alias: "x",
      default: ".DS_Store",
      describe: "skip files matching pattern; may use wildcards"
    })
    .options("open", {
      default: "https://gist.github.com/",
      describe: "URL to open in your web browser after creating gist"
    })
    .options("remote", {
      default: "origin",
      describe: "name of the git remote"
    })
    .options("version", {
      default: false,
      describe: "print the current version of gistup"
    })
    .options("help", {
      alias: "h",
      describe: "display this useful message"
    })
    .check(function(argv) {
      if (argv.help) optimist.showHelp(), process.exit(0);
      if (argv.version) console.log(require("../package.json").version), process.exit(0);
      if (argv.private) argv.public = false;
      if (argv.exclude === false) argv.exclude = [];
      else if (!Array.isArray(argv.exclude)) argv.exclude = [argv.exclude];
    })
    .argv;

queue(1)
    .defer(getSettings)
    .defer(gitInit)
    .defer(gitRemoteDoesNotExist)
    .defer(gitListUntrackedFiles)
    .await(function(error, settings, _, _, files) {
      unless(error)
          .defer(confirmFiles, files)
          .defer(gitAdd, files)
          .defer(gitCommit)
          .defer(createGist, settings.token)
          .await(function(error, _, _, _, id) {
            unless(error)
                .defer(gitRemoteAdd, id)
                .defer(gitPush)
                .defer(openBrowser, argv.open && settings.open, id)
                .await(unless);
          });
    });

function gitInit(callback) {
  child.exec("git init", function(error, stdout, stderr) {
    if (!error && stderr) process.stderr.write(stderr), error = new Error("git init failed.");
    if (!error && stdout) process.stdout.write(stdout);
    callback(error);
  });
}

function gitRemoteDoesNotExist(callback) {
  child.exec("git config --get remote." + quote.single(argv.remote) + ".url || true", function(error, stdout, stderr) {
    if (!error && stderr) process.stderr.write(stderr), error = new Error("git config failed.");
    if (!error && stdout) error = new UserError("the remote \"" + argv.remote + "\" already exists." + os.EOL + os.EOL + "Are you trying to run gistup in a directory that already has a git" + os.EOL + "repository? This would overwrite your existing remote, which points to:" + os.EOL + os.EOL + "  " + stdout + os.EOL + "If you’ve previously run gistup in this directory and you want to update" + os.EOL + "the contents of this gist, just push to the existing git remote:" + os.EOL + os.EOL + "  git push" + os.EOL + os.EOL + "Or, if want to rename this gist:" + os.EOL + os.EOL + "  gistup-rename 'New Description'" + os.EOL + os.EOL + "If you don’t need this remote anymore (say, if you cloned someone else’s" + os.EOL + "gist), gistup will replace it with a new one if you first run:" + os.EOL + os.EOL + "  git remote rm " + argv.remote + os.EOL + os.EOL + "Lastly, you can also specify a different remote name for gistup, so that" + os.EOL + "you can push to multiple git remotes:" + os.EOL + os.EOL + "  gistup --remote=gist" + os.EOL + os.EOL + "Please do one of the above and try again.");
    callback(error);
  });
}

function gitListUntrackedFiles(callback) {
  if (argv._.length) return void callback(null, argv._);
  child.exec("git ls-files --others --exclude-standard --directory" + argv.exclude.map(function(x) { return " -x " + quote.single(x); }) + " -x '*/'", function(error, stdout, stderr) {
    if (!error && stderr) process.stderr.write(stderr), error = new Error("git ls-files failed.");
    callback(error, error ? null : stdout.split(os.EOL).filter(Boolean));
  });
}

function confirmFiles(files, callback) {
  if (!argv.interactive) return void callback(null);
  var readin = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  var q = queue(1);

  files.forEach(function(file) {
    q.defer(confirmFile, file);
  });

  q.awaitAll(function(error) {
    readin.close();
    callback(error);
  });

  function confirmFile(file, callback) {
    readin.question("add " + file + "? ", function(answer) {
      if (/^y|yes$/i.test(answer)) return void callback(null);
      if (/^n|no$/i.test(answer)) return files.splice(files.indexOf(file), 1), void callback(null);
      confirmFile(file, callback);
    });
  }
}

function gitAdd(files, callback) {
  if (!files.length) return void callback(null);
  child.exec("git add " + files.map(quote.double).join(" "), function(error, stdout, stderr) {
    if (!error && stderr) process.stderr.write(stderr), error = new Error("git add failed.");
    if (!error && stdout) process.stdout.write(stdout);
    callback(error);
  });
}

function gitCommit(callback) {
  child.exec("git commit --allow-empty -m 'Initial gistup commit.'", function(error, stdout, stderr) {
    if (!error && stderr) process.stderr.write(stderr), error = new Error("git commit failed.");
    if (!error && stdout) process.stdout.write(stdout);
    callback(error);
  });
}

function createGist(token, callback) {
  api("POST", "/gists", token, {
    "description": argv.description,
    "public": argv.public,
    "files": {
      ".gistup": {
        "content": "gistup"
      }
    }
  }, function(error, response) {
    var id = null;
    if (!error && !/^[0-9a-f]+$/i.test(id = response.id)) error = new Error("invalid gist id: " + id); // for safety
    if (!error) {
      console.log("gist " + id + " created!");
      console.log(response.html_url);
    }
    callback(error, id);
  });
}

function gitRemoteAdd(id, callback) {
  child.exec("git remote add --track main " + quote.single(argv.remote) + " git@gist.github.com:" + id + ".git", function(error, stdout, stderr) {
    if (!error && stderr) process.stderr.write(stderr), error = new Error("git remote failed.");
    if (!error && stdout) process.stdout.write(stdout);
    callback(error);
  });
}

function gitPush(callback) {
  child.exec("git push -fu " + quote.single(argv.remote) + " main", function(error, stdout, stderr) {
    if (!error && stderr) process.stderr.write(stderr); // ignore warnings
    if (!error && stdout) process.stdout.write(stdout);
    callback(error);
  });
}

function openBrowser(open, id, callback) {
  if (!open) return void callback(null);
  child.exec(open + " " + quote.single(argv.open) + id, function(error, stdout, stderr) {
    if (!error && stderr) process.stderr.write(stderr); // ignore errors
    callback(null);
  });
}
